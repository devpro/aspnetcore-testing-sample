# Azure pipeline definition for the continuous integration of the solution
# See: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'SolutionFile'
  value: 'Devpro.AspNetCoreTestingSample.sln'
- name: 'TestProjects'
  value: 'test/*Tests/*.csproj'
- name: 'UnitTestProjects'
  value: 'test/*UnitTests/*.csproj'
# tool variables (Sonar)
- name: 'sonar.project.name'
  value: 'ASP.NET Core Testing Sample'
- name: 'sonar.project.key'
  value: 'devpro.aspnet-testing-sample'

stages:
- stage: 'unit_testing'
  displayName: 'Unit testing'
  jobs:
  - job: 'linux_unittests'
    displayName: 'Unit tests run on Linux'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Build the .NET solution'
      inputs:
        command: 'build'
        projects: '$(SolutionFile)'
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run the .NET unit tests'
      inputs:
        command: 'test'
        projects: '$(UnitTestProjects)'
        arguments: '--configuration $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
- stage: 'integration_testing'
  displayName: 'Integration testing'
  dependsOn: []
  jobs:
  - job: 'windows_integrationtests'
    displayName: 'Windows CI'
    pool:
      # code coverage generation only works on Windows for the moment
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET packages'
      inputs:
        command: 'restore'
        projects: '$(SolutionFile)'
        feedsToUse: 'select'
        noCache: $(dotnet.cache.disable)
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: PowerShell@2
      displayName: 'Start local MongoDB'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Starting MongoDB"
          md log
          md data
          Start-Process -FilePath "mongod" -ArgumentList "--logpath log/mongod.log", "--dbpath data", "--port 27017" -WindowStyle Hidden
    - task: SonarCloudPrepare@1
      displayName: 'Prepare code analysis'
      inputs:
        SonarCloud: '$(sonar.instance)'
        organization: '$(sonar.organization)'
        scannerMode: 'MSBuild'
        projectKey: '$(sonar.project.key)'
        projectName: '$(sonar.project.name)'
        extraProperties: |
          sonar.cpd.exclusions=**/Models/*.cs,**/Dto/*.cs
          sonar.exclusions=**/node_modules/**,**/*.spec.ts,**/e2e/**,**/coverage/**
    - task: DotNetCoreCLI@2
      displayName: 'Build the .NET solution'
      inputs:
        command: 'build'
        projects: '$(SolutionFile)'
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run the .NET test projects'
      inputs:
        command: 'test'
        projects: '$(TestProjects)'
        arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: SonarCloudAnalyze@1
      displayName: 'Analyze the code with Sonar'
    - task: SonarCloudPublish@1
      displayName: 'Publish the code analysis results'
      inputs:
        pollingTimeoutSec: '300'
    - task: PowerShell@2
      displayName: 'Stop local MongoDB'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Stopping MongoDB"
          Stop-Process -Name "mongod" -ErrorAction SilentlyContinue -Force
